[{"C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\App.js":"1","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\reportWebVitals.js":"2","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\components\\SidebarData.js":"3","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\components\\Navbar.js":"4","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Assicurazioni.js":"5","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Home.js":"6","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Soggetti.js":"7","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Studi.js":"8","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Liquidatori.js":"9","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Incarichi.js":"10","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Avvocati.js":"11","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\index.js":"12","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Appuntamenti.js":"13","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Incidenti.js":"14","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Dottori.js":"15"},{"size":1249,"mtime":1617288336577,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":1505,"mtime":1617288375321,"results":"19","hashOfConfig":"17"},{"size":1667,"mtime":1617292117096,"results":"20","hashOfConfig":"17"},{"size":14415,"mtime":1617289658881,"results":"21","hashOfConfig":"17"},{"size":18523,"mtime":1617292377850,"results":"22","hashOfConfig":"17"},{"size":23914,"mtime":1617357280630,"results":"23","hashOfConfig":"17"},{"size":8126,"mtime":1617289929632,"results":"24","hashOfConfig":"17"},{"size":7303,"mtime":1617289864104,"results":"25","hashOfConfig":"17"},{"size":25252,"mtime":1617289825468,"results":"26","hashOfConfig":"17"},{"size":15843,"mtime":1617289720967,"results":"27","hashOfConfig":"17"},{"size":503,"mtime":1616780844087,"results":"28","hashOfConfig":"17"},{"size":13341,"mtime":1617288272739,"results":"29","hashOfConfig":"17"},{"size":191,"mtime":1610703058909,"results":"30","hashOfConfig":"17"},{"size":7110,"mtime":1617289777088,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"1fmjuyc",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"35"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"35"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"35"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"35"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"35"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"35"},"C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\App.js",["71","72"],"import React, {useState, useEffect} from \"react\";\nimport './App.css';\n\nimport Navbar from \"./components/Navbar\";\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport Home from './pages/Home';\nimport Assicurazioni from './pages/Assicurazioni';\nimport Avvocati from './pages/Avvocati';\nimport Dottori from './pages/Dottori';\nimport Incarichi from './pages/Incarichi';\nimport Incidenti from './pages/Incidenti';\nimport Liquidatori from './pages/Liquidatori';\nimport Soggetti from './pages/Soggetti';\nimport Studi from './pages/Studi';\n\n\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route path='/' exact component={Home} />\n          <Route path='/incarichi' component={Incarichi} />\n          <Route path='/soggetti' component={Soggetti} />\n          <Route path='/dottori' component={Dottori} />\n          <Route path='/avvocati' component={Avvocati} />\n          <Route path='/incidenti' component={Incidenti} />\n          <Route path='/assicurazioni' component={Assicurazioni} />\n          <Route path='/liquidatori' component={Liquidatori} />\n          <Route path='/studi' component={Studi} />\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n ",["73","74"],"C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\reportWebVitals.js",[],"C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\components\\SidebarData.js",[],"C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\components\\Navbar.js",[],"C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Assicurazioni.js",["75","76"],"import React, { useState, useEffect } from 'react';\r\nimport axios from \"axios\";\r\nimport { Row, Form, Button, Table, Alert} from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as FaIcons from \"react-icons/fa\";\r\nimport 'moment-timezone';\r\n\r\nexport function Assicurazioni(props) {\r\n    const [postId, setPostId] = useState(null);\r\n\r\n    const [id, setId] = useState(null);\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [telefono1, setTelefono1] = useState(\"\");\r\n    const [telefono2, setTelefono2] = useState(\"\");\r\n    const [indirizzo, setIndirizzo] = useState(\"\");\r\n    const [cap, setCap] = useState(\"\");\r\n    const [partitaiva, setPartitaiva] = useState(\"\");\r\n    const [codicefiscale, setCodicefiscale] = useState(\"\");\r\n    const [note, setNote] = useState(\"\");\r\n\r\n    const [tipoins, setTipoins] = useState('Inserisci nuovo');\r\n    \r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ id: id, nome: name, email: email, telefono1: telefono1, telefono2: telefono2, indirizzo: indirizzo, cap: cap, partitaiva: partitaiva, codicefiscale: codicefiscale, note: note })\r\n    };\r\n\r\n    const [showSuccessAlert, isShowSuccessAlert]= useState(false);\r\n    const [showFailAlert, isShowFailAlert]= useState(false);\r\n\r\n    const [showSuccessDeleteAlert, isShowSuccessDeleteAlert]= useState(false);\r\n    const [showFailDeleteAlert, isShowFailDeleteAlert]= useState(false);\r\n\r\n    const handleSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        fetch('http://localhost:8080/insert/assicurazione', requestOptions)\r\n            .then(response => response.json())\r\n            .then(json => {             \r\n                isShowSuccessAlert(true);\r\n                clearForm();\r\n                fetchAssicurazioni();\r\n              })\r\n            .catch(err => {\r\n                console.log(err);\r\n                isShowFailAlert(true);\r\n            });\r\n    }\r\n    const handleDelete = (assicurazione) => {\r\n        var r = window.confirm(`Confermi di eliminare l' assicurazione: ${assicurazione.nome} , ${assicurazione.indirizzo} , ${assicurazione.cap}`);\r\n        if (r === true) {\r\n            const deleteOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(assicurazione)\r\n            };\r\n            fetch('http://localhost:8080/delete/assicurazione/', deleteOptions)\r\n                .then(response => {\r\n                    if(response.ok) {\r\n                        isShowSuccessDeleteAlert(true);\r\n                        clearForm();\r\n                        fetchAssicurazioni();\r\n                    } else {\r\n                        isShowFailDeleteAlert(true);\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    isShowFailDeleteAlert(true);\r\n                });\r\n        }\r\n    }\r\n\r\n    const handleEdit = (assicurazione) => {\r\n        console.log(\"EDIT\", assicurazione);\r\n        setId(assicurazione.id);\r\n        setName(assicurazione.nome);\r\n        setEmail(assicurazione.email);\r\n        setTelefono1(assicurazione.telefono1);\r\n        setTelefono2(assicurazione.telefono2);\r\n        setIndirizzo(assicurazione.indirizzo);\r\n        setCap(assicurazione.cap);\r\n        setPartitaiva(assicurazione.partitaiva);\r\n        setCodicefiscale(assicurazione.codicefiscale);\r\n        setNote(assicurazione.note);\r\n        setTipoins('Modifica Assicurazione');\r\n    }\r\n\r\n    const clearForm = () => {\r\n        setId(null);\r\n        setName(\"\");\r\n        setEmail(\"\");\r\n        setTelefono1(\"\");\r\n        setTelefono2(\"\");\r\n        setIndirizzo(\"\");\r\n        setCap(\"\");\r\n        setPartitaiva(\"\");\r\n        setCodicefiscale(\"\");\r\n        setNote(\"\");\r\n        setTipoins('Inserisci nuovo');\r\n    }\r\n\r\n    const [data, setData] = useState([]);\r\n\r\n    const fetchAssicurazioni = () => {\r\n        axios.get(\"http://localhost:8080/fetch/assicurazioni\").then( res => {\r\n            console.log(res);\r\n            setData(res.data);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchAssicurazioni();\r\n    }, []);\r\n\r\n    let assicurazioniArray = data;\r\n\r\n    const renderAssicurazioni = (assicurazione) => {\r\n        return (\r\n            <tr key={assicurazione.id}>\r\n            <td>{assicurazione.nome}</td>\r\n            <td>{assicurazione.email}</td>\r\n            <td>{assicurazione.telefono1}</td>\r\n            <td>{assicurazione.telefono2}</td>\r\n            <td>{assicurazione.indirizzo}</td>\r\n            <td>{assicurazione.cap}</td>\r\n            <td>{assicurazione.partitaiva}</td>\r\n            <td>{assicurazione.codicefiscale}</td>\r\n            <td>{assicurazione.note}</td>\r\n            <td><Button onClick={() => handleEdit(assicurazione)}><FaIcons.FaEdit/></Button></td>\r\n            <td><Button onClick={() => handleDelete(assicurazione)}><FaIcons.FaTrash/></Button></td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-10 mx-auto text-center form p-4\">\r\n                <h1 class=\"display-5 py-2 text-truncate\">Elenco Assicurazioni</h1>\r\n                { showSuccessDeleteAlert && <Alert idx=\"1\" variant=\"success\">Assicurazione eliminata con successo</Alert>}\r\n                { showFailDeleteAlert && <Alert idx=\"2\" variant=\"danger\">Eliminazione Assicurazione fallita</Alert> }\r\n                    <Table striped condensed hover>\r\n                        <thead>\r\n                            <tr>\r\n                            <th>Nome</th>\r\n                            <th>Email</th>\r\n                            <th>Telefono 1</th>\r\n                            <th>Telefono 2</th>\r\n                            <th>Indirizzo</th>\r\n                            <th>CAP</th>\r\n                            <th>Partita Iva</th>\r\n                            <th>Codice Fiscale</th>\r\n                            <th>Note</th>\r\n                            <th>Modifica</th>\r\n                            <th>Elimina</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {assicurazioniArray.map(renderAssicurazioni)}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n            \r\n            <div class=\"row\">\r\n                <div class=\"col-xl-5 col-lg-6 col-md-8 col-sm-10 mx-auto text-center form p-4\">\r\n                <h1 class=\"display-5 py-2 text-truncate\">{tipoins}</h1>\r\n                { showSuccessAlert && <Alert idx=\"3\" variant=\"success\">Aggiornato con successo</Alert>}\r\n                { showFailAlert && <Alert idx=\"4\" variant=\"danger\">Aggiornamento fallito</Alert> }\r\n\r\n                    <div class=\"px-2\">\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Nome </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Nome Assicurazione\"\r\n                                    defaultValue=\"\"\r\n                                    value={name}\r\n                                    onChange={e => setName(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci il nome Assicurazione\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Email </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Email Assicurazione\"\r\n                                    defaultValue=\"\"\r\n                                    value={email}\r\n                                    onChange={e => setEmail(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci il Email Assicurazione\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Telefono principale </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Telefono principale\"\r\n                                    defaultValue=\"\"\r\n                                    value={telefono1}\r\n                                    onChange={e => setTelefono1(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci il Telefono principale\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Telefono secondario </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Telefono secondario\"\r\n                                    defaultValue=\"\"\r\n                                    value={telefono2}\r\n                                    onChange={e => setTelefono2(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci il Telefono secondario\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextAddress\">\r\n                                <Form.Label> Indirizzo </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Indirizzo Assicurazione\"\r\n                                    defaultValue=\"\"\r\n                                    value={indirizzo}\r\n                                    onChange={e => setIndirizzo(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci l'indirizzo es. \"Via Dante Alighieri, 3, Firenze\"\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formPlaintextCap\">\r\n                                <Form.Label> CAP </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"number\"\r\n                                    placeholder=\"CAP Assicurazione\"\r\n                                    defaultValue=\"\"\r\n                                    value={cap}\r\n                                    onChange={e => setCap(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci CAP es. \"50122\"\r\n                                </Form.Text>\r\n                                \r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Partita iva </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Partita iva\"\r\n                                    defaultValue=\"\"\r\n                                    value={partitaiva}\r\n                                    onChange={e => setPartitaiva(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci Partita iva Assicurazione\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Codice Fiscale </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Codice Fiscale\"\r\n                                    defaultValue=\"\"\r\n                                    value={codicefiscale}\r\n                                    onChange={e => setCodicefiscale(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci il Codice Fiscale Assicurazione\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Note </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Note\"\r\n                                    defaultValue=\"\"\r\n                                    value={note}\r\n                                    onChange={e => setNote(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci eventuali Note per l'Assicurazione\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextSubmit\">\r\n                            <Button variant=\"primary\" type=\"submit\">Salva</Button>\r\n                            <Button variant=\"secondary\" onClick={() => clearForm()}>Annulla</Button>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Assicurazioni;\r\n","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Home.js",["77","78","79","80","81","82","83","84","85","86"],"import React, { useState, useEffect, Component } from 'react';\r\nimport axios from \"axios\";\r\nimport { Row, Form, Button, Table, Alert} from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Moment from 'react-moment';\r\nimport 'moment-timezone';\r\nimport * as FaIcons from \"react-icons/fa\";\r\n\r\nimport Calendar from 'react-calendar'\r\nimport '../../node_modules/react-calendar/dist/Calendar.css';\r\nimport moment from 'moment';\r\nimport AsyncSelect from 'react-select/async';\r\n\r\nexport function Home(props) {\r\n    \r\n    const [id, setId] = useState(null);\r\n    const [idStudio, setIdStudio] = useState(\"\");\r\n    const [dataAppuntamento, setDataAppuntamento] = useState(new Date());\r\n    const [oraAppuntamento, setOraAppuntamento] = useState(\"\");\r\n    const [durata, setDurata] = useState(15);\r\n    const [idIncarico, setIdIncarico] = useState(\"\");\r\n    const [note, setNote] = useState(\"\");\r\n    const [value, onChange] = useState(new Date());\r\n\r\n    const [tipoins, setTipoins] = useState('Inserisci nuovo');\r\n    const [dataIncarichi, setDataIncarichi] = useState([]);\r\n    const [dataAppuntamenti, setDataAppuntamenti] = useState([]);\r\n    const [dataStudi, setDataStudi] = useState([]);\r\n    const [dataSog, setDataSog] = useState([]);\r\n    const [dataAvv, setDataAvv] = useState([]);\r\n    const [dataDot, setDataDot] = useState([]);\r\n\r\n    const fetchAppuntamenti = () => {\r\n        axios.get(\"http://localhost:8080/fetch/appuntamenti\").then( res => {\r\n            console.log(res);\r\n            setDataAppuntamenti(res.data);\r\n        });\r\n    };\r\n\r\n    const fetchIncarichi = () => {\r\n        axios.get(\"http://localhost:8080/fetch/incarichi\").then( res => {\r\n            console.log(res);\r\n            setDataIncarichi(res.data);\r\n        });\r\n    };\r\n\r\n    const fetchStudi = () => {\r\n        axios.get(\"http://localhost:8080/fetch/studi\").then( res => {\r\n            setDataStudi(res.data);\r\n        });\r\n    };\r\n\r\n    const fetchDottori = () => {\r\n        axios.get(\"http://localhost:8080/fetch/dottori\").then( res => {\r\n            setDataDot(res.data);\r\n        });\r\n    };\r\n\r\n    const fetchSoggetti = () => {\r\n        axios.get(\"http://localhost:8080/fetch/soggetti\").then( res => {\r\n            setDataSog(res.data);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAppuntamentoByDate(value);\r\n        fetchIncarichi();\r\n        fetchStudi();\r\n        fetchDottori();\r\n        fetchSoggetti();\r\n    }, []);\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ id: id, idStudio: idStudio, dataAppuntamento: dataAppuntamento, oraAppuntamento: oraAppuntamento,\r\n                            durata: durata, idIncarico: idIncarico, note: note })\r\n    };\r\n    \r\n    const getAppuntamenti = (value, event) => {\r\n        getAppuntamentoByDate(value);\r\n    }\r\n    const [showSuccessAlert, isShowSuccessAlert]= useState(false);\r\n    const [showFailAlert, isShowFailAlert]= useState(false);\r\n\r\n    const [showSuccessDeleteAlert, isShowSuccessDeleteAlert] = useState(false);\r\n    const [showFailDeleteAlert, isShowFailDeleteAlert] = useState(false);\r\n\r\n    const [appuntamentiNotEmpty, isAppuntamentiNotEmpty ] = useState(false);\r\n\r\n    const getAppuntamentoByDate = (value) => {\r\n        axios.get('http://localhost:8080/get/appuntamenti?date='+ moment(value.toISOString()).format('DD/MM/YYYY')).then( res => {\r\n            console.log(res);\r\n            setDataAppuntamenti(res.data);\r\n            if (res.data != null && res.data.length != 0) {\r\n                isAppuntamentiNotEmpty(true);\r\n            } else {\r\n                isAppuntamentiNotEmpty(false);\r\n            }\r\n        });\r\n    }\r\n    const handleDelete = (appuntamento) => {\r\n        var r = window.confirm(`Confermi di eliminare appuntamento in data ${appuntamento.dataAppuntamento.substring(0,10)} alle ore ${appuntamento.oraAppuntamento} per l'incarico ${getNumeroIncarico(appuntamento.idIncarico)} `);\r\n        if (r === true) {\r\n            const deleteOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ id: appuntamento.id, idStudio: appuntamento.idStudio, dataAppuntamento: appuntamento.dataAppuntamento,\r\n                    durata: appuntamento.durata, idIncarico: appuntamento.idIncarico, note: appuntamento.note })\r\n            };\r\n            fetch('http://localhost:8080/delete/appuntamento/', deleteOptions)\r\n                .then(response => {\r\n                    if(response.ok) {\r\n                        isShowSuccessDeleteAlert(true);\r\n                        clearForm();\r\n                        getAppuntamentoByDate(value);\r\n                    } else {\r\n                        isShowFailDeleteAlert(true);\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    isShowFailDeleteAlert(true);\r\n                });\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (evt) => {\r\n        console.log(requestOptions);\r\n        evt.preventDefault();\r\n        fetch('http://localhost:8080/insert/appuntamento', requestOptions)\r\n            .then(response => response.json())\r\n            .then(json => {             \r\n                isShowSuccessAlert(true);\r\n                clearForm();\r\n                getAppuntamentoByDate(value);\r\n              })\r\n            .catch(err => {\r\n                isShowFailAlert(true);\r\n            });\r\n    }\r\n\r\n    const handleEdit = (appuntamento) => {\r\n        console.log(\"EDIT\", appuntamento);\r\n        setId(appuntamento.id);\r\n        setIdStudio(appuntamento.idStudio);\r\n        setDataAppuntamento(new Date(appuntamento.dataAppuntamento));\r\n        setDurata(appuntamento.durata);\r\n        setIdIncarico(appuntamento.idIncarico);\r\n        setNote(appuntamento.note);\r\n\r\n        setTipoins('Modifica Appuntamento');\r\n    }\r\n\r\n    const clearForm = () => {\r\n        setId(null);\r\n\r\n        setId(\"\");\r\n        setIdStudio(\"\");\r\n        setDataAppuntamento(new Date());\r\n        setDurata(15);\r\n        setIdIncarico(\"\");\r\n        setNote(\"\");\r\n\r\n        setTipoins('Inserisci nuovo');\r\n    }\r\n\r\n\r\n    const renderAppuntamenti = (appuntamento) => {\r\n        return (\r\n            <tr key={appuntamento.id}>\r\n            <td>\r\n                {getDottore(appuntamento.idIncarico)}\r\n            </td>\r\n            <td>{getNomeStudio(appuntamento.idStudio)}</td>\r\n            <td>{getNumeroIncarico(appuntamento.idIncarico)}</td>\r\n            <td>\r\n                {getSoggetto(appuntamento.idIncarico)}\r\n            </td>\r\n            <td><Moment format=\"DD/MM/YY\">\r\n                    {appuntamento.dataAppuntamento}\r\n                </Moment>\r\n            </td>\r\n            <td>{appuntamento.oraAppuntamento}</td>\r\n            <td>\r\n                {appuntamento.durata} minuti\r\n            </td>\r\n            <td>{appuntamento.note}</td>\r\n            <td><Button onClick={() => handleEdit(appuntamento)}><FaIcons.FaEdit/></Button></td>\r\n            <td><Button onClick={() => handleDelete(appuntamento)}><FaIcons.FaTrash/></Button></td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    const getNumeroIncarico = (id) => {\r\n        const numero = \"\";\r\n        for (let index = 0; index < dataIncarichi.length; index++) {\r\n            const element = dataIncarichi[index].id;\r\n            if(element === id){\r\n                return dataIncarichi[index].numero_incarico;\r\n            }\r\n        }\r\n        return numero;\r\n    };\r\n\r\n    const getNomeStudio = (id) => {\r\n        const nomeStudio = \"\";\r\n        for (let index = 0; index < dataStudi.length; index++) {\r\n            const element = dataStudi[index].id;\r\n            if(element === id){\r\n                return dataStudi[index].nome;\r\n            }\r\n        }\r\n        return nomeStudio;\r\n    };\r\n\r\n    const getDottore = (idIncarico) => {\r\n        const nomeStudio = \"\";\r\n        for (let index = 0; index < dataIncarichi.length; index++) {\r\n            if(dataIncarichi[index].id === idIncarico){\r\n                for (let index = 0; index < dataDot.length; index++) {\r\n                    if(dataDot[index].id === dataIncarichi[index].id_dottore){\r\n                        return \"Dott. \" + dataDot[index].cognome + \" \" +  dataDot[index].nome;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return nomeStudio;\r\n    };\r\n\r\n    const getSoggetto = (idIncarico) => {\r\n        const nomeStudio = \"\";\r\n        for (let index = 0; index < dataIncarichi.length; index++) {\r\n            if(dataIncarichi[index].id === idIncarico){\r\n                for (let index = 0; index < dataSog.length; index++) {\r\n                    if(dataSog[index].id === dataIncarichi[index].id_soggetto){\r\n                        return dataSog[index].cognome + \" \" +  dataSog[index].nome;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return nomeStudio;\r\n    };\r\n\r\n    const getStudioSelected = (idStudio) => {\r\n        for (let index = 0; index < dataStudi.length; index++) {\r\n            if(dataStudi[index].id === idStudio){\r\n                return { value: dataStudi[index].id, label: dataStudi[index].nome }\r\n            }\r\n        }\r\n        return \"\"\r\n    };\r\n\r\n    const getIncaricoSelected = (idIncarico) => {\r\n        for (let index = 0; index < dataIncarichi.length; index++) {\r\n            if(dataIncarichi[index].id === idIncarico){\r\n                return { value: dataIncarichi[index].id, label: dataIncarichi[index].numero_incarico }\r\n            }\r\n        }\r\n        return \"\"\r\n    };\r\n\r\n    const filterStudi = (inputValue) => {\r\n        return dataStudi.map((studio, index) => (                                        \r\n            { value: studio.id, label: studio.nome }\r\n        )).filter(i =>\r\n          i.label.toLowerCase().includes(inputValue.toLowerCase())\r\n        );\r\n    };\r\n    const loadStudi = (inputValue, callback) => {\r\n        setTimeout(() => {\r\n          callback(filterStudi(inputValue));\r\n        }, 1000);\r\n    };\r\n    \r\n    const filterIncarichi = (inputValue) => {\r\n        return dataIncarichi.map((incarico, index) => (                                        \r\n            { value: incarico.id, label: incarico.numero_incarico }\r\n        )).filter(i =>\r\n          i.label.toLowerCase().includes(inputValue.toLowerCase())\r\n        );\r\n    };\r\n    const loadIncarichi = (inputValue, callback) => {\r\n        setTimeout(() => {\r\n          callback(filterIncarichi(inputValue));\r\n        }, 1000);\r\n    };\r\n\r\n    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\r\n\r\n    const formatDate = (date) => {\r\n        if(date != null && date != \"\"){\r\n            return new Date(date).toISOString().substring(0,10);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-10 mx-auto text-center form p-4\">\r\n                    <h3 class=\"display-5 py-2 text-truncate\">Appuntamenti di {value.toLocaleString(\"it-IT\", options)}</h3>\r\n                    <Calendar\r\n                        className={['c1','c2']}\r\n                        style=\"margin: auto;\"\r\n                        locale=\"it-IT\"\r\n                        onChange={onChange}\r\n                        value={value}\r\n                        onClickDay={getAppuntamenti}\r\n                    />\r\n                    { showSuccessDeleteAlert && <Alert idx=\"1\" variant=\"success\">Appuntamento eliminato con successo</Alert>}\r\n                    { showFailDeleteAlert && <Alert idx=\"2\" variant=\"danger\">Eliminazione Appuntamento fallita</Alert> }\r\n                    </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                    <div class=\"col-sm-10 mx-auto text-center form p-4\">\r\n                    { appuntamentiNotEmpty ? (\r\n                        <Table striped condensed hover>\r\n                            <thead>\r\n                                <tr>\r\n                                <th>Dottore</th>\r\n                                <th>Studio</th>\r\n                                <th>Incarico</th>\r\n                                <th>Soggetto</th>\r\n                                <th>Data Appuntamento</th>\r\n                                <th>Ora</th>\r\n                                <th>Durata</th>\r\n                                <th>Note</th>\r\n                                <th>Modifica</th>\r\n                                <th>Elimina</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {dataAppuntamenti.map(renderAppuntamenti)}\r\n                            </tbody>\r\n                        </Table>\r\n                    ):(\r\n                        <h4>Non ci sono appuntamenti per il giorno selezionato</h4>\r\n                    )}\r\n                    </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"row\">\r\n                    <div class=\"col-xl-5 col-lg-6 col-md-8 col-sm-10 mx-auto text-center form p-4\">\r\n                        <h1 class=\"display-5 py-2 text-truncate\">{tipoins}</h1>\r\n                        <Form onSubmit={handleSubmit}>\r\n\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Durata </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"number\"\r\n                                    placeholder=\"15\"\r\n                                    defaultValue=\"\"\r\n                                    value={durata}\r\n                                    onChange={e => setDurata(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci Durata in minuti (default: 15)\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Data </Form.Label>\r\n                                <Form.Control\r\n                                    required\r\n                                    type=\"date\"\r\n                                    value={formatDate(dataAppuntamento)}\r\n                                    onChange={e => setDataAppuntamento(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci la Data Appuntamento\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Ora </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Ora appuntamento\"\r\n                                    defaultValue=\"\"\r\n                                    value={oraAppuntamento}\r\n                                    onChange={e => setOraAppuntamento(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci l'ora dell'appuntamento (es. 15:00)\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"exampleForm.SelectCustomSizeSm\">\r\n                                <Form.Label> Studio </Form.Label>\r\n                                <AsyncSelect\r\n                                    cacheOptions\r\n                                    placeholder=\"Seleziona Studio\"\r\n                                    loadOptions={loadStudi}\r\n                                    defaultOptions={dataStudi.map((studio, index) => (                                        \r\n                                        { value: studio.id, label: studio.nome }\r\n                                    ))}\r\n                                    value={getStudioSelected(idStudio)}\r\n                                    onChange={e => setIdStudio(e.value)}\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"exampleForm.SelectCustomSizeSm\">\r\n                                <Form.Label> Incarico </Form.Label>\r\n                                <AsyncSelect\r\n                                    cacheOptions\r\n                                    placeholder=\"Seleziona Incarico\"\r\n                                    loadOptions={loadIncarichi}\r\n                                    defaultOptions={dataIncarichi.map((incarico, index) => (                                        \r\n                                        { value: incarico.id, label: incarico.numero_incarico }\r\n                                    ))}\r\n                                    value={getIncaricoSelected(idIncarico)}\r\n                                    onChange={e => setIdIncarico(e.value)}\r\n                                />\r\n                            </Form.Group>\r\n                            \r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Note </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Note Incarico\"\r\n                                    defaultValue=\"\"\r\n                                    value={note}\r\n                                    onChange={e => setNote(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci Note\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formPlaintextSubmit\">\r\n                                <Button variant=\"primary\" type=\"submit\">Salva</Button>\r\n                                <Button variant=\"secondary\" onClick={() => clearForm()}>Annulla</Button>\r\n                            </Form.Group>\r\n                        </Form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Home;\r\n","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Soggetti.js",["87","88","89"],"C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Studi.js",["90","91"],"import React, { useState, useEffect } from 'react';\r\nimport axios from \"axios\";\r\nimport { Row, Form, Button, Table, Alert} from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as FaIcons from \"react-icons/fa\";\r\n\r\nexport function Studi(props) {\r\n    const [postId, setPostId] = useState(null);\r\n\r\n    const [id, setId] = useState(null);\r\n    const [name, setName] = useState(\"\");\r\n    const [indirizzo, setIndirizzo] = useState(\"\");\r\n    const [cap, setCap] = useState(\"\");\r\n    \r\n    const [tipoins, setTipoins] = useState('Inserisci nuovo');\r\n    \r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ id: id, nome: name, indirizzo: indirizzo, cap: cap })\r\n    };\r\n\r\n    const [showSuccessAlert, isShowSuccessAlert]= useState(false);\r\n    const [showFailAlert, isShowFailAlert]= useState(false);\r\n\r\n    const [showSuccessDeleteAlert, isShowSuccessDeleteAlert]= useState(false);\r\n    const [showFailDeleteAlert, isShowFailDeleteAlert]= useState(false);\r\n\r\n    const handleSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        fetch('http://localhost:8080/insert/studio', requestOptions)\r\n            .then(response => response.json())\r\n            .then(json => {             \r\n                isShowSuccessAlert(true);\r\n                clearForm();\r\n                fetchStudi();\r\n              })\r\n            .catch(err => {\r\n                console.log(err);\r\n                isShowFailAlert(true);\r\n            });\r\n    }\r\n    const handleDelete = (studio) => {\r\n        var r = window.confirm(`Confermi di eliminare lo studio: ${studio.nome} , ${studio.indirizzo} , ${studio.cap}`);\r\n        if (r === true) {\r\n            const deleteOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ id: studio.id, nome: studio.name, indirizzo: studio.indirizzo, cap: studio.cap })\r\n            };\r\n            fetch('http://localhost:8080/delete/studio/', deleteOptions)\r\n                .then(response => {\r\n                    if(response.ok) {\r\n                        isShowSuccessDeleteAlert(true);\r\n                        clearForm();\r\n                        fetchStudi();\r\n                    } else {\r\n                        isShowFailDeleteAlert(true);\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    isShowFailDeleteAlert(true);\r\n                });\r\n        }\r\n    }\r\n\r\n    const handleEdit = (studio) => {\r\n        console.log(\"EDIT\", studio);\r\n        setId(studio.id);\r\n        setName(studio.nome);\r\n        setIndirizzo(studio.indirizzo);\r\n        setCap(studio.cap);\r\n        setTipoins('Modifica Studio');\r\n    }\r\n\r\n    const clearForm = () => {\r\n        setId(null);\r\n        setName(\"\");\r\n        setIndirizzo(\"\");\r\n        setCap(\"\");\r\n        setTipoins('Inserisci nuovo');\r\n    }\r\n\r\n    const [data, setData] = useState([]);\r\n\r\n    const fetchStudi = () => {\r\n        axios.get(\"http://localhost:8080/fetch/studi\").then( res => {\r\n            console.log(res);\r\n            setData(res.data);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchStudi();\r\n    }, []);\r\n\r\n    let studiArray = data;\r\n\r\n    const renderStudi = (studio) => {\r\n        return (\r\n            <tr key={studio.id}>\r\n            <td>{studio.nome}</td>\r\n            <td>{studio.indirizzo}</td>\r\n            <td>{studio.cap}</td>\r\n            <td><Button onClick={() => handleEdit(studio)}><FaIcons.FaEdit/></Button></td>\r\n            <td><Button onClick={() => handleDelete(studio)}><FaIcons.FaTrash/></Button></td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-10 mx-auto text-center form p-4\">\r\n                <h1 class=\"display-5 py-2 text-truncate\">Elenco Studi</h1>\r\n                { showSuccessDeleteAlert && <Alert idx=\"1\" variant=\"success\">Studio eliminato con successo</Alert>}\r\n                { showFailDeleteAlert && <Alert idx=\"2\" variant=\"danger\">Eliminazione Studio fallita</Alert> }\r\n                    <Table striped condensed hover>\r\n                        <thead>\r\n                            <tr>\r\n                            <th>Nome</th>\r\n                            <th>Indirizzo</th>\r\n                            <th>CAP</th>\r\n                            <th>Modifica</th>\r\n                            <th>Elimina</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {studiArray.map(renderStudi)}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n            \r\n            <div class=\"row\">\r\n                <div class=\"col-xl-5 col-lg-6 col-md-8 col-sm-10 mx-auto text-center form p-4\">\r\n                <h1 class=\"display-5 py-2 text-truncate\">{tipoins}</h1>\r\n                { showSuccessAlert && <Alert idx=\"3\" variant=\"success\">Aggiornato con successo</Alert>}\r\n                { showFailAlert && <Alert idx=\"4\" variant=\"danger\">Aggiornamento fallito</Alert> }\r\n\r\n                    <div class=\"px-2\">\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Nome </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Nome Studio\"\r\n                                    defaultValue=\"\"\r\n                                    value={name}\r\n                                    onChange={e => setName(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci il nome Studio\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formPlaintextAddress\">\r\n                                <Form.Label> Indirizzo </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Indirizzo Studio\"\r\n                                    defaultValue=\"\"\r\n                                    value={indirizzo}\r\n                                    onChange={e => setIndirizzo(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci l'indirizzo es. \"Via Dante Alighieri, 3, Firenze\"\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formPlaintextCap\">\r\n                                <Form.Label> CAP </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"number\"\r\n                                    placeholder=\"CAP Studio\"\r\n                                    defaultValue=\"\"\r\n                                    value={cap}\r\n                                    onChange={e => setCap(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci CAP es. \"50122\"\r\n                                </Form.Text>\r\n                                \r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextSubmit\">\r\n                            <Button variant=\"primary\" type=\"submit\">Salva</Button>\r\n                            <Button variant=\"secondary\" onClick={() => clearForm()}>Annulla</Button>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Studi;\r\n","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Liquidatori.js",["92","93"],"import React, { useState, useEffect } from 'react';\r\nimport axios from \"axios\";\r\nimport { Row, Form, Button, Table, Alert} from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as FaIcons from \"react-icons/fa\";\r\n\r\nexport function Liquidatori(props) {\r\n    const [postId, setPostId] = useState(null);\r\n\r\n    const [id, setId] = useState(null);\r\n    const [name, setName] = useState(\"\");\r\n    const [cognome, setCognome] = useState(\"\");\r\n    \r\n    const [tipoins, setTipoins] = useState('Inserisci nuovo');\r\n    \r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ id: id, nome: name, cognome: cognome })\r\n    };\r\n\r\n    const [showSuccessAlert, isShowSuccessAlert]= useState(false);\r\n    const [showFailAlert, isShowFailAlert]= useState(false);\r\n\r\n    const [showSuccessDeleteAlert, isShowSuccessDeleteAlert]= useState(false);\r\n    const [showFailDeleteAlert, isShowFailDeleteAlert]= useState(false);\r\n\r\n    const handleSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        fetch('http://localhost:8080/insert/liquidatore', requestOptions)\r\n            .then(response => response.json())\r\n            .then(json => {             \r\n                isShowSuccessAlert(true);\r\n                clearForm();\r\n                fetchLiquidatori();\r\n              })\r\n            .catch(err => {\r\n                console.log(err);\r\n                isShowFailAlert(true);\r\n            });\r\n    }\r\n    const handleDelete = (liquidatore) => {\r\n        var r = window.confirm(`Confermi di eliminare il liquidatore: ${liquidatore.nome} , ${liquidatore.cognome} `);\r\n        if (r === true) {\r\n            const deleteOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ id: liquidatore.id, nome: liquidatore.name, indirizzo: liquidatore.cognome })\r\n            };\r\n            fetch('http://localhost:8080/delete/liquidatore/', deleteOptions)\r\n                .then(response => {\r\n                    if(response.ok) {\r\n                        isShowSuccessDeleteAlert(true);\r\n                        clearForm();\r\n                        fetchLiquidatori();\r\n                    } else {\r\n                        isShowFailDeleteAlert(true);\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    isShowFailDeleteAlert(true);\r\n                });\r\n        }\r\n    }\r\n\r\n    const handleEdit = (liquidatore) => {\r\n        console.log(\"EDIT\", liquidatore);\r\n        setId(liquidatore.id);\r\n        setName(liquidatore.nome);\r\n        setCognome(liquidatore.cognome);\r\n        setTipoins('Modifica Liquidatore');\r\n    }\r\n\r\n    const clearForm = () => {\r\n        setId(null);\r\n        setName(\"\");\r\n        setCognome(\"\");\r\n        setTipoins('Inserisci nuovo');\r\n    }\r\n\r\n    const [data, setData] = useState([]);\r\n\r\n    const fetchLiquidatori = () => {\r\n        axios.get(\"http://localhost:8080/fetch/liquidatori\").then( res => {\r\n            console.log(res);\r\n            setData(res.data);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchLiquidatori();\r\n    }, []);\r\n\r\n    let liquidatoriArray = data;\r\n\r\n    const renderLiquidatori = (liquidatore) => {\r\n        return (\r\n            <tr key={liquidatore.id}>\r\n            <td>{liquidatore.nome}</td>\r\n            <td>{liquidatore.cognome}</td>\r\n            <td><Button onClick={() => handleEdit(liquidatore)}><FaIcons.FaEdit/></Button></td>\r\n            <td><Button onClick={() => handleDelete(liquidatore)}><FaIcons.FaTrash/></Button></td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-10 mx-auto text-center form p-4\">\r\n                <h1 class=\"display-5 py-2 text-truncate\">Elenco Liquidatori</h1>\r\n                { showSuccessDeleteAlert && <Alert idx=\"1\" variant=\"success\">Liquidatore eliminato con successo</Alert>}\r\n                { showFailDeleteAlert && <Alert idx=\"2\" variant=\"danger\">Eliminazione Liquidatore fallita</Alert> }\r\n                    <Table striped condensed hover>\r\n                        <thead>\r\n                            <tr>\r\n                            <th>Nome</th>\r\n                            <th>Cognome</th>\r\n                            <th>Modifica</th>\r\n                            <th>Elimina</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {liquidatoriArray.map(renderLiquidatori)}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n            \r\n            <div class=\"row\">\r\n                <div class=\"col-xl-5 col-lg-6 col-md-8 col-sm-10 mx-auto text-center form p-4\">\r\n                <h1 class=\"display-5 py-2 text-truncate\">{tipoins}</h1>\r\n                { showSuccessAlert && <Alert idx=\"3\" variant=\"success\">Aggiornato con successo</Alert>}\r\n                { showFailAlert && <Alert idx=\"4\" variant=\"danger\">Aggiornamento fallito</Alert> }\r\n\r\n                    <div class=\"px-2\">\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Nome </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Nome Liquidatore\"\r\n                                    defaultValue=\"\"\r\n                                    value={name}\r\n                                    onChange={e => setName(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci il nome Liquidatore\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formPlaintextAddress\">\r\n                                <Form.Label> Cognome </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Indirizzo Liquidatore\"\r\n                                    defaultValue=\"\"\r\n                                    value={cognome}\r\n                                    onChange={e => setCognome(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci il cognome Liquidatore\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formPlaintextSubmit\">\r\n                                <Button variant=\"primary\" type=\"submit\">Salva</Button>\r\n                                <Button variant=\"secondary\" onClick={() => clearForm()}>Annulla</Button>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Liquidatori;\r\n","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Incarichi.js",["94","95","96","97","98"],"import React, { useState, useEffect, Component } from 'react';\r\nimport axios from \"axios\";\r\nimport { Row, Form, Button, Table, Alert} from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Moment from 'react-moment';\r\nimport 'moment-timezone';\r\nimport * as FaIcons from \"react-icons/fa\";\r\n\r\nimport AsyncSelect from 'react-select/async';\r\nimport { FormattedDate } from 'react-intl';\r\n\r\nexport function Incarichi(props) {\r\n    const [postId, setPostId] = useState(null);\r\n\r\n    const [id, setId] = useState(null);\r\n    const [numero_incarico, setNumeroIncarico] = useState(\"\");\r\n    const [tipo, setTipo] = useState(\"\");\r\n    const [idAssicurazione, setIdAssicurazione] = useState(\"\");\r\n    const [idLiquidatore, setIdLiquidatore] = useState(\"\");\r\n    const [ambito, setAmbito] = useState(\"\");\r\n    const [idSoggetto, setIdSoggetto] = useState(\"\");\r\n    const [idAvvocato, setIdAvvocato] = useState(\"\");\r\n    const [nSinistro, setNSinistro] = useState(\"\");\r\n    const [idDottore, setIdDottore] = useState(\"\");\r\n    const [dataSinistro, setDataSinistro] = useState(new Date());\r\n    const [dataIncarico, setDataIncarico] = useState(new Date());\r\n    const [note, setNote] = useState(\"\");\r\n    \r\n    const [tipoins, setTipoins] = useState('Inserisci nuovo');\r\n    \r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ id: id, numero_incarico: numero_incarico, tipo: tipo, id_assicurazione: idAssicurazione,\r\n            id_liquidatore: idLiquidatore, ambito: ambito, id_soggetto: idSoggetto,\r\n            id_avvocato: idAvvocato, n_sinistro: nSinistro, id_dottore: idDottore,\r\n            data_sinistro: dataSinistro, data_incarico: dataIncarico, note: note })\r\n    };\r\n\r\n    const [showSuccessAlert, isShowSuccessAlert]= useState(false);\r\n    const [showFailAlert, isShowFailAlert]= useState(false);\r\n\r\n    const [showSuccessDeleteAlert, isShowSuccessDeleteAlert]= useState(false);\r\n    const [showFailDeleteAlert, isShowFailDeleteAlert]= useState(false);\r\n\r\n    const handleSubmit = (evt) => {\r\n        console.log(requestOptions);\r\n        evt.preventDefault();\r\n        fetch('http://localhost:8080/insert/incarico', requestOptions)\r\n            .then(response => response.json())\r\n            .then(json => {             \r\n                isShowSuccessAlert(true);\r\n                clearForm();\r\n                fetchIncarichi();\r\n              })\r\n            .catch(err => {\r\n                isShowFailAlert(true);\r\n            });\r\n    }\r\n    const handleDelete = (incarico) => {\r\n        var r = window.confirm(`Confermi di eliminare il incarico: ${incarico.nome} , ${incarico.cognome} `);\r\n        if (r === true) {\r\n            const deleteOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ id: incarico.id, numero_incarico: incarico.numero_incarico, tipo: incarico.tipo, id_assicurazione: incarico.id_assicurazione,\r\n                    id_liquidatore: incarico.id_liquidatore, ambito: incarico.ambito, id_soggetto: incarico.id_soggetto,\r\n                    id_avvocato: incarico.id_avvocato, n_sinistro: incarico.n_sinistro, id_dottore: incarico.id_dottore,\r\n                    data_sinistro: incarico.data_sinistro, data_incarico: incarico.data_incarico, note: incarico.note })\r\n            };\r\n            fetch('http://localhost:8080/delete/incarico/', deleteOptions)\r\n                .then(response => {\r\n                    if(response.ok) {\r\n                        isShowSuccessDeleteAlert(true);\r\n                        clearForm();\r\n                        fetchIncarichi();\r\n                    } else {\r\n                        isShowFailDeleteAlert(true);\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    isShowFailDeleteAlert(true);\r\n                });\r\n        }\r\n    }\r\n\r\n    const handleEdit = (incarico) => {\r\n        console.log(\"EDIT\", incarico);\r\n        setId(incarico.id);\r\n        setNumeroIncarico(incarico.numero_incarico);\r\n        setTipo(incarico.tipo);\r\n        setIdAssicurazione(incarico.id_assicurazione);\r\n        setIdLiquidatore(incarico.id_liquidatore);\r\n        setAmbito(incarico.ambito);\r\n        setIdSoggetto(incarico.id_soggetto);\r\n        setIdAvvocato(incarico.id_avvocato);\r\n        setNSinistro(incarico.n_sinistro);\r\n        setIdDottore(incarico.id_dottore);\r\n        setDataSinistro(incarico.data_sinistro);\r\n        setDataIncarico(incarico.data_incarico);\r\n        setNote(incarico.note);\r\n\r\n        setTipoins('Modifica Incarico');\r\n    }\r\n\r\n    const clearForm = () => {\r\n        setId(null);\r\n\r\n        setTipo(\"\");\r\n        setNumeroIncarico(\"\");\r\n        setIdAssicurazione(\"\");\r\n        setIdLiquidatore(\"\");\r\n        setAmbito(\"\");\r\n        setIdSoggetto(\"\");\r\n        setIdAvvocato(\"\");\r\n        setNSinistro(\"\");\r\n        setIdDottore(\"\");\r\n        setDataSinistro(\"\");\r\n        setDataIncarico(\"\");\r\n        setNote(\"\");\r\n\r\n        setTipoins('Inserisci nuovo');\r\n    }\r\n\r\n    const [data, setData] = useState([]);\r\n    const [dataAss, setDataAss] = useState([]);\r\n    const [dataLiq, setDataLiq] = useState([]);\r\n    const [dataSog, setDataSog] = useState([]);\r\n    const [dataAvv, setDataAvv] = useState([]);\r\n    const [dataDot, setDataDot] = useState([]);\r\n\r\n    const fetchIncarichi = () => {\r\n        axios.get(\"http://localhost:8080/fetch/incarichi\").then( res => {\r\n            console.log(res);\r\n            setData(res.data);\r\n        });\r\n    };\r\n\r\n    const fetchAssicurazioni = () => {\r\n        axios.get(\"http://localhost:8080/fetch/assicurazioni\").then( res => {\r\n            setDataAss(res.data);\r\n        });\r\n    };\r\n\r\n    const fetchLiquidatori = () => {\r\n        axios.get(\"http://localhost:8080/fetch/liquidatori\").then( res => {\r\n            setDataLiq(res.data);\r\n        });\r\n    };\r\n\r\n    const fetchSoggetti = () => {\r\n        axios.get(\"http://localhost:8080/fetch/soggetti\").then( res => {\r\n            setDataSog(res.data);\r\n        });\r\n    };\r\n\r\n    const fetchAvvocati = () => {\r\n        axios.get(\"http://localhost:8080/fetch/avvocati\").then( res => {\r\n            setDataAvv(res.data);\r\n        });\r\n    };\r\n\r\n    const fetchDottori = () => {\r\n        axios.get(\"http://localhost:8080/fetch/dottori\").then( res => {\r\n            setDataDot(res.data);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchIncarichi();\r\n        fetchAssicurazioni();\r\n        fetchLiquidatori();\r\n        fetchSoggetti();\r\n        fetchAvvocati();\r\n        fetchDottori();\r\n    }, []);\r\n\r\n    let incarichiArray = data;\r\n\r\n    const renderIncarichi = (incarico) => {\r\n        return (\r\n            <tr key={incarico.id}>\r\n            <td>{incarico.numero_incarico}</td>\r\n            <td>{incarico.tipo}</td>\r\n            <td>{getNomeAssicurazione(incarico.id_assicurazione)}</td>\r\n            <td>{getNomeLiquidatore(incarico.id_liquidatore)}</td>\r\n            <td>{incarico.ambito}</td>\r\n            <td>{getNomeSoggetto(incarico.id_soggetto)}</td>\r\n            <td>{incarico.id_avvocato}</td>\r\n            <td>{incarico.n_sinistro}</td>\r\n            <td>{getNomeDottore(incarico.id_dottore)}</td>\r\n            <td>\r\n                <Moment format=\"DD/MM/YY\">\r\n                    {incarico.data_sinistro}\r\n                </Moment>\r\n            </td>\r\n            <td>\r\n                <Moment format=\"DD/MM/YY\">\r\n                    {incarico.data_incarico}\r\n                </Moment>\r\n            </td>\r\n            <td>{incarico.note}</td>\r\n            <td><Button onClick={() => handleEdit(incarico)}><FaIcons.FaEdit/></Button></td>\r\n            <td><Button onClick={() => handleDelete(incarico)}><FaIcons.FaTrash/></Button></td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    const getNomeAssicurazione = (id) => {\r\n        const nome = \"\";\r\n        for (let index = 0; index < dataAss.length; index++) {\r\n            const element = dataAss[index].id;\r\n            if(element === id){\r\n                return dataAss[index].nome;\r\n            }\r\n        }\r\n        return nome;\r\n    };\r\n\r\n    const getNomeLiquidatore = (id) => {\r\n        const nome = \"\";\r\n        for (let index = 0; index < dataLiq.length; index++) {\r\n            const element = dataLiq[index].id;\r\n            if(element === id){\r\n                return dataLiq[index].cognome + \" \" + dataLiq[index].nome;\r\n            }\r\n        }\r\n        return nome;\r\n    };\r\n\r\n    const getNomeSoggetto = (id) => {\r\n        const nome = \"\";\r\n        for (let index = 0; index < dataSog.length; index++) {\r\n            const element = dataSog[index].id;\r\n            if(element === id){\r\n                return dataSog[index].cognome + \" \" + dataLiq[index].nome;\r\n            }\r\n        }\r\n        return nome;\r\n    };\r\n\r\n    const getNomeDottore = (id) => {\r\n        const nome = \"\";\r\n        for (let index = 0; index < dataDot.length; index++) {\r\n            const element = dataDot[index].id;\r\n            if(element === id){\r\n                return dataDot[index].cognome + \" \" + dataLiq[index].nome;\r\n            }\r\n        }\r\n        return nome;\r\n    };\r\n\r\n    const filterAssicurazioni = (inputValue) => {\r\n        return dataAss.map((assicurazione, index) => (                                        \r\n            { value: assicurazione.id, label: assicurazione.nome }\r\n        )).filter(i =>\r\n          i.label.toLowerCase().includes(inputValue.toLowerCase())\r\n        );\r\n    };\r\n    const loadAssicurazioni = (inputValue, callback) => {\r\n        setTimeout(() => {\r\n          callback(filterAssicurazioni(inputValue));\r\n        }, 1000);\r\n    };\r\n    \r\n    const filterLiquidatori = (inputValue) => {\r\n        return dataLiq.map((liquidatore, index) => (                                        \r\n            { value: liquidatore.id, label: liquidatore.cognome + \" \" + liquidatore.nome }\r\n        )).filter(i =>\r\n          i.label.toLowerCase().includes(inputValue.toLowerCase())\r\n        );\r\n    };\r\n    const loadLiquidatori = (inputValue, callback) => {\r\n        setTimeout(() => {\r\n          callback(filterLiquidatori(inputValue));\r\n        }, 1000);\r\n    };\r\n\r\n    const filterSoggetti = (inputValue) => {\r\n        return dataSog.map((soggetto, index) => (                                        \r\n            { value: soggetto.id, label: soggetto.cognome + \" \" + soggetto.nome + \" - \" + soggetto.datanascita.substring(0, 10)}\r\n        )).filter(i =>\r\n          i.label.toLowerCase().includes(inputValue.toLowerCase())\r\n        );\r\n    };\r\n    const loadSoggetti = (inputValue, callback) => {\r\n        setTimeout(() => {\r\n          callback(filterSoggetti(inputValue));\r\n        }, 1000);\r\n    };\r\n\r\n    const filterAvvocati = (inputValue) => {\r\n        return dataAvv.map((avvocato, index) => (                                        \r\n            { value: avvocato.id, label: avvocato.cognome + \" \" + avvocato.nome }\r\n        )).filter(i =>\r\n          i.label.toLowerCase().includes(inputValue.toLowerCase())\r\n        );\r\n    };\r\n    const loadAvvocati = (inputValue, callback) => {\r\n        setTimeout(() => {\r\n          callback(filterAvvocati(inputValue));\r\n        }, 1000);\r\n    };\r\n\r\n    const filterDottori = (inputValue) => {\r\n        return dataDot.map((dottore, index) => (                                        \r\n            { value: dottore.id, label: dottore.cognome + \" \" + dottore.nome }\r\n        )).filter(i =>\r\n          i.label.toLowerCase().includes(inputValue.toLowerCase())\r\n        );\r\n    };\r\n    const loadDottori = (inputValue, callback) => {\r\n        setTimeout(() => {\r\n          callback(filterDottori(inputValue));\r\n        }, 1000);\r\n    };\r\n\r\n    const getSoggettoSelected = (idSoggetto) => {\r\n        for (let index = 0; index < dataSog.length; index++) {\r\n            if(dataSog[index].id === idSoggetto){\r\n                return { value: dataSog[index].id, label: dataSog[index].cognome + \" \" + dataSog[index].nome + \" - \" + dataSog[index].datanascita.substring(0, 10)  }\r\n            }\r\n        }\r\n        return \"\"\r\n    };\r\n\r\n    const getAssicurazioneSelected = (idAssicurazione) => {\r\n        for (let index = 0; index < dataAss.length; index++) {\r\n            if(dataAss[index].id === idAssicurazione){\r\n                return { value: dataAss[index].id, label: dataAss[index].nome }\r\n            }\r\n        }\r\n        return \"\"\r\n    };\r\n\r\n    const getLiquidatoreSelected = (idLiquidatore) => {\r\n        for (let index = 0; index < dataLiq.length; index++) {\r\n            if(dataLiq[index].id === idLiquidatore){\r\n                return { value: dataLiq[index].id, label: dataLiq[index].cognome + \" \" + dataLiq[index].nome }\r\n            }\r\n        }\r\n        return \"\"\r\n    };\r\n\r\n    const getAvvocatoSelected = (idAvvocato) => {\r\n        for (let index = 0; index < dataAvv.length; index++) {\r\n            if(dataAvv[index].id === idAvvocato){\r\n                return { value: dataAvv[index].id, label: dataAvv[index].cognome + \" \" + dataAvv[index].nome }\r\n            }\r\n        }\r\n        return \"\"\r\n    };\r\n\r\n    const getDottoreSelected = (idDottore) => {\r\n        for (let index = 0; index < dataDot.length; index++) {\r\n            if(dataDot[index].id === idDottore){\r\n                return { value: dataDot[index].id, label: dataDot[index].cognome + \" \" + dataDot[index].nome }\r\n            }\r\n        }\r\n        return \"\"\r\n    };\r\n    const formatDate = (date) => {\r\n        if(date != null && date != \"\"){\r\n            return new Date(date).toISOString().substring(0,10);\r\n        }\r\n        return null;\r\n    }\r\n    return (\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-10 mx-auto text-center form p-4\">\r\n                <h1 class=\"display-5 py-2 text-truncate\">Elenco Incarichi</h1>\r\n                { showSuccessDeleteAlert && <Alert idx=\"1\" variant=\"success\">Incarico eliminato con successo</Alert>}\r\n                { showFailDeleteAlert && <Alert idx=\"2\" variant=\"danger\">Eliminazione Incarico fallita</Alert> }\r\n                    <Table striped condensed hover>\r\n                        <thead>\r\n                            <tr>\r\n                            <th>Numero Incarico</th>\r\n                            <th>Tipo</th>\r\n                            <th>Assicurazione</th>\r\n                            <th>Liquidatore</th>\r\n                            <th>Ambito</th>\r\n                            <th>Soggetto</th>\r\n                            <th>Avvocato</th>\r\n                            <th>N. Sinistro</th>\r\n                            <th>Dottore</th>\r\n                            <th>Data Sinistro</th>\r\n                            <th>Data Incarico</th>\r\n                            <th>Modifica</th>\r\n                            <th>Elimina</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {incarichiArray.map(renderIncarichi)}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n            \r\n            <div class=\"row\">\r\n                <div class=\"col-xl-5 col-lg-6 col-md-8 col-sm-10 mx-auto text-center form p-4\">\r\n                <h1 class=\"display-5 py-2 text-truncate\">{tipoins}</h1>\r\n                { showSuccessAlert && <Alert idx=\"3\" variant=\"success\">Aggiornato con successo</Alert>}\r\n                { showFailAlert && <Alert idx=\"4\" variant=\"danger\">Aggiornamento fallito</Alert> }\r\n\r\n                    <div class=\"px-2\">\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Numero Incarico </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"es. 0000/2020\"\r\n                                    defaultValue=\"\"\r\n                                    value={numero_incarico}\r\n                                    onChange={e => setNumeroIncarico(e.target.value)}\r\n                                    disabled\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Numero incarico autogenerato in fase di inserimento\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Tipo </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Tipo Incarico\"\r\n                                    defaultValue=\"\"\r\n                                    value={tipo}\r\n                                    onChange={e => setTipo(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci il tipo Incarico\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Ambito </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Ambito Incarico\"\r\n                                    defaultValue=\"\"\r\n                                    value={ambito}\r\n                                    onChange={e => setAmbito(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci ambito Incarico\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Numero Sinistro </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"N. Sinistro\"\r\n                                    defaultValue=\"\"\r\n                                    value={nSinistro}\r\n                                    onChange={e => setNSinistro(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci numero Sinistro\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Data Sinistro </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"date\"\r\n                                    placeholder=\"Data Sinistro\"\r\n                                    value={formatDate(dataSinistro)}\r\n                                    onChange={e => setDataSinistro(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci la Data Sinistro\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Data Incarico </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"date\"\r\n                                    placeholder=\"Data Incarico\"\r\n                                    value={formatDate(dataIncarico)}\r\n                                    onChange={e => setDataIncarico(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci la Data Incarico\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"exampleForm.SelectCustomSizeSm\">\r\n                                <Form.Label> Soggetto </Form.Label>\r\n                                <AsyncSelect\r\n                                    cacheOptions\r\n                                    placeholder=\"Seleziona Soggetto\"\r\n                                    loadOptions={loadSoggetti}\r\n                                    defaultOptions={dataSog.map((soggetto, index) => (                                        \r\n                                        { value: soggetto.id, label: soggetto.cognome + \" \" + soggetto.nome + \" - \" + soggetto.datanascita.substring(0, 10) }\r\n                                    ))}\r\n                                    value={getSoggettoSelected(idSoggetto)}\r\n                                    onChange={e => setIdSoggetto(e.value)}\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"exampleForm.SelectCustomSizeSm\">\r\n                                <Form.Label> Assicurazione </Form.Label>\r\n                                <AsyncSelect\r\n                                    cacheOptions\r\n                                    placeholder=\"Seleziona Assicurazione\"\r\n                                    loadOptions={loadAssicurazioni}\r\n                                    defaultOptions={dataAss.map((assicurazione, index) => (                                        \r\n                                        { value: assicurazione.id, label: assicurazione.nome }\r\n                                    ))}\r\n                                    value={getAssicurazioneSelected(idAssicurazione)}\r\n                                    onChange={e => setIdAssicurazione(e.value)}\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"exampleForm.SelectCustomSizeSm\">\r\n                                <Form.Label> Liquidatore </Form.Label>\r\n                                <AsyncSelect\r\n                                    cacheOptions\r\n                                    placeholder=\"Seleziona Liquidatore\"\r\n                                    loadOptions={loadLiquidatori}\r\n                                    defaultOptions={dataLiq.map((liquidatore, index) => (                                        \r\n                                        { value: liquidatore.id, label: liquidatore.cognome + \" \" + liquidatore.nome }\r\n                                    ))}\r\n                                    value={getLiquidatoreSelected(idLiquidatore)}\r\n                                    onChange={e => setIdLiquidatore(e.value)}\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"exampleForm.SelectCustomSizeSm\">\r\n                                <Form.Label> Avvocato </Form.Label>\r\n                                <AsyncSelect\r\n                                    cacheOptions\r\n                                    placeholder=\"Seleziona Avvocato\"\r\n                                    loadOptions={loadAvvocati}\r\n                                    defaultOptions={dataAvv.map((avvocato, index) => (                                        \r\n                                        { value: avvocato.id, label: avvocato.cognome + \" \" + avvocato.nome }\r\n                                    ))}\r\n                                    value={getAvvocatoSelected(idAvvocato)}\r\n                                    onChange={e => setIdAvvocato(e.value)}\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"exampleForm.SelectCustomSizeSm\">\r\n                                <Form.Label> Dottore </Form.Label>\r\n                                <AsyncSelect\r\n                                    cacheOptions\r\n                                    placeholder=\"Seleziona Dottore\"\r\n                                    loadOptions={loadDottori}\r\n                                    defaultOptions={dataDot.map((dottore, index) => (                                        \r\n                                        { value: dottore.id, label: dottore.cognome + \" \" + dottore.nome }\r\n                                    ))}\r\n                                    value={getDottoreSelected(idDottore)}\r\n                                    onChange={e => setIdDottore(e.value)}\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextSubmit\">\r\n                                <Button variant=\"primary\" type=\"submit\">Salva</Button>\r\n                                <Button variant=\"secondary\" onClick={() => clearForm()}>Annulla</Button>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Incarichi;\r\n","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Avvocati.js",["99","100","101"],"import React, { useState, useEffect } from 'react';\r\nimport axios from \"axios\";\r\nimport { Row, Form, Button, Table, Alert} from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Moment from 'react-moment';\r\nimport 'moment-timezone';\r\nimport * as FaIcons from \"react-icons/fa\";\r\n\r\nexport function Avvocati(props) {\r\n    const [postId, setPostId] = useState(null);\r\n\r\n    const [id, setId] = useState(null);\r\n    const [name, setName] = useState(\"\");\r\n    const [cognome, setCognome] = useState(\"\");\r\n    const [titolo, setTitolo] = useState(\"\");\r\n    const [indirizzo, setIndirizzo] = useState(\"\");\r\n    const [cap, setCap] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [pec, setPec] = useState(\"\");\r\n    const [telefono1, setTelefono1] = useState(\"\");\r\n    const [telefono2, setTelefono2] = useState(\"\");\r\n    const [fax, setFax] = useState(\"\");\r\n    const [note, setNote] = useState(\"\");\r\n\r\n    const [tipoins, setTipoins] = useState('Inserisci nuovo');\r\n    \r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ id: id, nome: name, cognome: cognome, titolo: titolo, indirizzo: indirizzo, cap: cap, email: email, pec: pec, telefono1: telefono1, telefono2: telefono2, fax: fax, note: note })\r\n    };\r\n\r\n    const [showSuccessAlert, isShowSuccessAlert]= useState(false);\r\n    const [showFailAlert, isShowFailAlert]= useState(false);\r\n\r\n    const [showSuccessDeleteAlert, isShowSuccessDeleteAlert]= useState(false);\r\n    const [showFailDeleteAlert, isShowFailDeleteAlert]= useState(false);\r\n\r\n    const handleSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        fetch('http://localhost:8080/insert/avvocato', requestOptions)\r\n            .then(response => response.json())\r\n            .then(json => {             \r\n                isShowSuccessAlert(true);\r\n                clearForm();\r\n                fetchAvvocati();\r\n              })\r\n            .catch(err => {\r\n                console.log(err);\r\n                isShowFailAlert(true);\r\n            });\r\n    }\r\n    const handleDelete = (avvocato) => {\r\n        var r = window.confirm(`Confermi di eliminare l' avvocato: ${avvocato.nome} , ${avvocato.cognome}`);\r\n        if (r === true) {\r\n            const deleteOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(avvocato)\r\n            };\r\n            fetch('http://localhost:8080/delete/avvocato/', deleteOptions)\r\n                .then(response => {\r\n                    if(response.ok) {\r\n                        isShowSuccessDeleteAlert(true);\r\n                        clearForm();\r\n                        fetchAvvocati();\r\n                    } else {\r\n                        isShowFailDeleteAlert(true);\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    isShowFailDeleteAlert(true);\r\n                });\r\n        }\r\n    }\r\n\r\n    const handleEdit = (avvocato) => {\r\n        console.log(\"EDIT\", avvocato);\r\n        setId(avvocato.id);\r\n        setName(avvocato.nome);\r\n        setCognome(avvocato.cognome);\r\n        setTitolo(avvocato.titolo);\r\n        setIndirizzo(avvocato.indirizzo);\r\n        setCap(avvocato.cap);\r\n        setEmail(avvocato.email);\r\n        setPec(avvocato.pec);\r\n        setTelefono1(avvocato.telefono1);\r\n        setTelefono2(avvocato.telefono2);\r\n        setFax(avvocato.fax);\r\n        setNote(avvocato.note);\r\n        setTipoins('Modifica Avvocato');\r\n    }\r\n\r\n    const clearForm = () => {\r\n        setId(null);\r\n        setName(\"\");\r\n        setCognome(\"\");\r\n        setTitolo(\"\");\r\n        setIndirizzo(\"\");\r\n        setCap(\"\");\r\n        setEmail(\"\");\r\n        setPec(\"\");\r\n        setTelefono1(\"\");\r\n        setTelefono2(\"\");\r\n        setFax(\"\");\r\n        setNote(\"\");\r\n        setTipoins('Inserisci nuovo');\r\n    }\r\n\r\n    const [data, setData] = useState([]);\r\n\r\n    const fetchAvvocati = () => {\r\n        axios.get(\"http://localhost:8080/fetch/avvocati\").then( res => {\r\n            console.log(res);\r\n            setData(res.data);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchAvvocati();\r\n    }, []);\r\n\r\n    let avvocatiArray = data;\r\n\r\n    const renderAvvocati = (avvocato) => {\r\n        return (\r\n            <tr key={avvocato.id}>\r\n            <td>{avvocato.nome}</td>\r\n            <td>{avvocato.cognome}</td>\r\n            <td>{avvocato.titolo}</td>\r\n            <td>{avvocato.indirizzo}</td>\r\n            <td>{avvocato.cap}</td>\r\n            <td>{avvocato.email}</td>\r\n            <td>{avvocato.pec}</td>\r\n            <td>{avvocato.telefono1}</td>\r\n            <td>{avvocato.telefono2}</td>\r\n            <td>{avvocato.fax}</td>\r\n            <td>{avvocato.note}</td>\r\n            <td><Button onClick={() => handleEdit(avvocato)}><FaIcons.FaEdit/></Button></td>\r\n            <td><Button onClick={() => handleDelete(avvocato)}><FaIcons.FaTrash/></Button></td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-10 mx-auto text-center form p-4\">\r\n                <h1 class=\"display-5 py-2 text-truncate\">Elenco Avvocati</h1>\r\n                { showSuccessDeleteAlert && <Alert idx=\"1\" variant=\"success\">Avvocato eliminata con successo</Alert>}\r\n                { showFailDeleteAlert && <Alert idx=\"2\" variant=\"danger\">Eliminazione Avvocato fallita</Alert> }\r\n                    <Table striped condensed hover>\r\n                        <thead>\r\n                            <tr>\r\n                            <th>Nome</th>\r\n                            <th>Cognome</th>\r\n                            <th>Titolo</th>\r\n                            <th>Indirizzo</th>\r\n                            <th>CAP</th>\r\n                            <th>Email</th>\r\n                            <th>PEC</th>\r\n                            <th>Telefono 1</th>\r\n                            <th>Telefono 2</th>\r\n                            <th>Fax</th>\r\n                            <th>Note</th>\r\n                            <th>Modifica</th>\r\n                            <th>Elimina</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {avvocatiArray.map(renderAvvocati)}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n            \r\n            <div class=\"row\">\r\n                <div class=\"col-xl-5 col-lg-6 col-md-8 col-sm-10 mx-auto text-center form p-4\">\r\n                <h1 class=\"display-5 py-2 text-truncate\">{tipoins}</h1>\r\n                { showSuccessAlert && <Alert idx=\"3\" variant=\"success\">Aggiornato con successo</Alert>}\r\n                { showFailAlert && <Alert idx=\"4\" variant=\"danger\">Aggiornamento fallito</Alert> }\r\n\r\n                    <div class=\"px-2\">\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Nome </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Nome Avvocato\"\r\n                                    defaultValue=\"\"\r\n                                    value={name}\r\n                                    onChange={e => setName(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci il nome Avvocato\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Cognome </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Cognome Avvocato\"\r\n                                    defaultValue=\"\"\r\n                                    value={cognome}\r\n                                    onChange={e => setCognome(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci il Cognome Avvocato\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Titolo </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Titolo Avvocato\"\r\n                                    defaultValue=\"\"\r\n                                    value={titolo}\r\n                                    onChange={e => setTitolo(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci il Titolo Avvocato\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextAddress\">\r\n                                <Form.Label> Indirizzo </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Indirizzo Avvocato\"\r\n                                    defaultValue=\"\"\r\n                                    value={indirizzo}\r\n                                    onChange={e => setIndirizzo(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci l'indirizzo es. \"Via Dante Alighieri, 3, Firenze\"\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextCap\">\r\n                                <Form.Label> CAP </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"number\"\r\n                                    placeholder=\"CAP Avvocato\"\r\n                                    defaultValue=\"\"\r\n                                    value={cap}\r\n                                    onChange={e => setCap(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci CAP es. \"50122\"\r\n                                </Form.Text>\r\n                                \r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Email </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Email\"\r\n                                    defaultValue=\"\"\r\n                                    value={email}\r\n                                    onChange={e => setEmail(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci Email Avvocato\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Pec </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"PEC\"\r\n                                    defaultValue=\"\"\r\n                                    value={pec}\r\n                                    onChange={e => setPec(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci l'indirizzo di posta certificata dell'Avvocato\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Telefono principale </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Telefono principale\"\r\n                                    defaultValue=\"\"\r\n                                    value={telefono1}\r\n                                    onChange={e => setTelefono1(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci il Telefono principale\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Telefono secondario </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Telefono secondario\"\r\n                                    defaultValue=\"\"\r\n                                    value={telefono2}\r\n                                    onChange={e => setTelefono2(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci il Telefono secondario\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Fax </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Fax\"\r\n                                    defaultValue=\"\"\r\n                                    value={fax}\r\n                                    onChange={e => setFax(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci il fax\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Note </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Note\"\r\n                                    defaultValue=\"\"\r\n                                    value={note}\r\n                                    onChange={e => setNote(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci eventuali Note per l'Avvocato\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextSubmit\">\r\n                            <Button variant=\"primary\" type=\"submit\">Salva</Button>\r\n                            <Button variant=\"secondary\" onClick={() => clearForm()}>Annulla</Button>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Avvocati;\r\n","C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\index.js",[],"C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Appuntamenti.js",["102","103","104","105","106","107","108"],"C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Incidenti.js",[],"C:\\BVitSy\\studiomedico\\src\\main\\frontend\\src\\pages\\Dottori.js",["109","110"],"import React, { useState, useEffect } from 'react';\r\nimport axios from \"axios\";\r\nimport { Row, Form, Button, Table, Alert} from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as FaIcons from \"react-icons/fa\";\r\n\r\nexport function Dottori(props) {\r\n    const [postId, setPostId] = useState(null);\r\n\r\n    const [id, setId] = useState(null);\r\n    const [name, setName] = useState(\"\");\r\n    const [cognome, setCognome] = useState(\"\");\r\n    \r\n    const [tipoins, setTipoins] = useState('Inserisci nuovo');\r\n    \r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ id: id, nome: name, cognome: cognome })\r\n    };\r\n\r\n    const [showSuccessAlert, isShowSuccessAlert]= useState(false);\r\n    const [showFailAlert, isShowFailAlert]= useState(false);\r\n\r\n    const [showSuccessDeleteAlert, isShowSuccessDeleteAlert]= useState(false);\r\n    const [showFailDeleteAlert, isShowFailDeleteAlert]= useState(false);\r\n\r\n    const handleSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        fetch('http://localhost:8080/insert/dottore', requestOptions)\r\n            .then(response => response.json())\r\n            .then(json => {             \r\n                isShowSuccessAlert(true);\r\n                clearForm();\r\n                fetchDottori();\r\n              })\r\n            .catch(err => {\r\n                isShowFailAlert(true);\r\n            });\r\n    }\r\n    const handleDelete = (dottore) => {\r\n        var r = window.confirm(`Confermi di eliminare il dottore: ${dottore.nome} , ${dottore.cognome} `);\r\n        if (r === true) {\r\n            const deleteOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ id: dottore.id, nome: dottore.name, cognome: dottore.cognome })\r\n            };\r\n            fetch('http://localhost:8080/delete/dottore/', deleteOptions)\r\n                .then(response => {\r\n                    if(response.ok) {\r\n                        isShowSuccessDeleteAlert(true);\r\n                        clearForm();\r\n                        fetchDottori();\r\n                    } else {\r\n                        isShowFailDeleteAlert(true);\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    isShowFailDeleteAlert(true);\r\n                });\r\n        }\r\n    }\r\n\r\n    const handleEdit = (dottore) => {\r\n        console.log(\"EDIT\", dottore);\r\n        setId(dottore.id);\r\n        setName(dottore.nome);\r\n        setCognome(dottore.cognome);\r\n        setTipoins('Modifica Dottore');\r\n    }\r\n\r\n    const clearForm = () => {\r\n        setId(null);\r\n        setName(\"\");\r\n        setCognome(\"\");\r\n        setTipoins('Inserisci nuovo');\r\n    }\r\n\r\n    const [data, setData] = useState([]);\r\n\r\n    const fetchDottori = () => {\r\n        axios.get(\"http://localhost:8080/fetch/dottori\").then( res => {\r\n            console.log(res);\r\n            setData(res.data);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchDottori();\r\n    }, []);\r\n\r\n    let dottoriArray = data;\r\n\r\n    const renderDottori = (dottore) => {\r\n        return (\r\n            <tr key={dottore.id}>\r\n            <td>{dottore.nome}</td>\r\n            <td>{dottore.cognome}</td>\r\n            <td><Button onClick={() => handleEdit(dottore)}><FaIcons.FaEdit/></Button></td>\r\n            <td><Button onClick={() => handleDelete(dottore)}><FaIcons.FaTrash/></Button></td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-10 mx-auto text-center form p-4\">\r\n                <h1 class=\"display-5 py-2 text-truncate\">Elenco Dottori</h1>\r\n                { showSuccessDeleteAlert && <Alert idx=\"1\" variant=\"success\">Dottore eliminato con successo</Alert>}\r\n                { showFailDeleteAlert && <Alert idx=\"2\" variant=\"danger\">Eliminazione Dottore fallita</Alert> }\r\n                    <Table striped condensed hover>\r\n                        <thead>\r\n                            <tr>\r\n                            <th>Nome</th>\r\n                            <th>Cognome</th>\r\n                            <th>Modifica</th>\r\n                            <th>Elimina</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {dottoriArray.map(renderDottori)}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n            \r\n            <div class=\"row\">\r\n                <div class=\"col-xl-5 col-lg-6 col-md-8 col-sm-10 mx-auto text-center form p-4\">\r\n                <h1 class=\"display-5 py-2 text-truncate\">{tipoins}</h1>\r\n                { showSuccessAlert && <Alert idx=\"3\" variant=\"success\">Aggiornato con successo</Alert>}\r\n                { showFailAlert && <Alert idx=\"4\" variant=\"danger\">Aggiornamento fallito</Alert> }\r\n\r\n                    <div class=\"px-2\">\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Form.Group as={Row} controlId=\"formPlaintextName\">\r\n                                <Form.Label> Nome </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Nome Dottore\"\r\n                                    defaultValue=\"\"\r\n                                    value={name}\r\n                                    onChange={e => setName(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci il nome Dottore\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formPlaintextAddress\">\r\n                                <Form.Label> Cognome </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Indirizzo Dottore\"\r\n                                    defaultValue=\"\"\r\n                                    value={cognome}\r\n                                    onChange={e => setCognome(e.target.value)}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                Inserisci il cognome Dottore\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Row} controlId=\"formPlaintextSubmit\">\r\n                                <Button variant=\"primary\" type=\"submit\">Salva</Button>\r\n                                <Button variant=\"secondary\" onClick={() => clearForm()}>Annulla</Button>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dottori;\r\n",{"ruleId":"111","severity":1,"message":"112","line":1,"column":16,"nodeType":"113","messageId":"114","endLine":1,"endColumn":24},{"ruleId":"111","severity":1,"message":"115","line":1,"column":26,"nodeType":"113","messageId":"114","endLine":1,"endColumn":35},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"111","severity":1,"message":"120","line":9,"column":12,"nodeType":"113","messageId":"114","endLine":9,"endColumn":18},{"ruleId":"111","severity":1,"message":"121","line":9,"column":20,"nodeType":"113","messageId":"114","endLine":9,"endColumn":29},{"ruleId":"111","severity":1,"message":"122","line":1,"column":38,"nodeType":"113","messageId":"114","endLine":1,"endColumn":47},{"ruleId":"111","severity":1,"message":"123","line":30,"column":12,"nodeType":"113","messageId":"114","endLine":30,"endColumn":19},{"ruleId":"111","severity":1,"message":"124","line":30,"column":21,"nodeType":"113","messageId":"114","endLine":30,"endColumn":31},{"ruleId":"111","severity":1,"message":"125","line":33,"column":11,"nodeType":"113","messageId":"114","endLine":33,"endColumn":28},{"ruleId":"126","severity":1,"message":"127","line":71,"column":8,"nodeType":"128","endLine":71,"endColumn":10,"suggestions":"129"},{"ruleId":"111","severity":1,"message":"130","line":83,"column":12,"nodeType":"113","messageId":"114","endLine":83,"endColumn":28},{"ruleId":"111","severity":1,"message":"131","line":84,"column":12,"nodeType":"113","messageId":"114","endLine":84,"endColumn":25},{"ruleId":"132","severity":1,"message":"133","line":95,"column":53,"nodeType":"134","messageId":"135","endLine":95,"endColumn":55},{"ruleId":"132","severity":1,"message":"133","line":292,"column":33,"nodeType":"134","messageId":"135","endLine":292,"endColumn":35},{"ruleId":"136","severity":1,"message":"137","line":305,"column":25,"nodeType":"138","endLine":305,"endColumn":46},{"ruleId":"111","severity":1,"message":"120","line":10,"column":12,"nodeType":"113","messageId":"114","endLine":10,"endColumn":18},{"ruleId":"111","severity":1,"message":"121","line":10,"column":20,"nodeType":"113","messageId":"114","endLine":10,"endColumn":29},{"ruleId":"132","severity":1,"message":"133","line":160,"column":33,"nodeType":"134","messageId":"135","endLine":160,"endColumn":35},{"ruleId":"111","severity":1,"message":"120","line":8,"column":12,"nodeType":"113","messageId":"114","endLine":8,"endColumn":18},{"ruleId":"111","severity":1,"message":"121","line":8,"column":20,"nodeType":"113","messageId":"114","endLine":8,"endColumn":29},{"ruleId":"111","severity":1,"message":"120","line":8,"column":12,"nodeType":"113","messageId":"114","endLine":8,"endColumn":18},{"ruleId":"111","severity":1,"message":"121","line":8,"column":20,"nodeType":"113","messageId":"114","endLine":8,"endColumn":29},{"ruleId":"111","severity":1,"message":"122","line":1,"column":38,"nodeType":"113","messageId":"114","endLine":1,"endColumn":47},{"ruleId":"111","severity":1,"message":"139","line":10,"column":10,"nodeType":"113","messageId":"114","endLine":10,"endColumn":23},{"ruleId":"111","severity":1,"message":"120","line":13,"column":12,"nodeType":"113","messageId":"114","endLine":13,"endColumn":18},{"ruleId":"111","severity":1,"message":"121","line":13,"column":20,"nodeType":"113","messageId":"114","endLine":13,"endColumn":29},{"ruleId":"132","severity":1,"message":"133","line":364,"column":33,"nodeType":"134","messageId":"135","endLine":364,"endColumn":35},{"ruleId":"111","severity":1,"message":"140","line":5,"column":8,"nodeType":"113","messageId":"114","endLine":5,"endColumn":14},{"ruleId":"111","severity":1,"message":"120","line":10,"column":12,"nodeType":"113","messageId":"114","endLine":10,"endColumn":18},{"ruleId":"111","severity":1,"message":"121","line":10,"column":20,"nodeType":"113","messageId":"114","endLine":10,"endColumn":29},{"ruleId":"111","severity":1,"message":"122","line":1,"column":38,"nodeType":"113","messageId":"114","endLine":1,"endColumn":47},{"ruleId":"111","severity":1,"message":"141","line":102,"column":12,"nodeType":"113","messageId":"114","endLine":102,"endColumn":19},{"ruleId":"111","severity":1,"message":"142","line":102,"column":21,"nodeType":"113","messageId":"114","endLine":102,"endColumn":31},{"ruleId":"111","severity":1,"message":"123","line":103,"column":12,"nodeType":"113","messageId":"114","endLine":103,"endColumn":19},{"ruleId":"111","severity":1,"message":"124","line":103,"column":21,"nodeType":"113","messageId":"114","endLine":103,"endColumn":31},{"ruleId":"111","severity":1,"message":"143","line":104,"column":12,"nodeType":"113","messageId":"114","endLine":104,"endColumn":19},{"ruleId":"111","severity":1,"message":"144","line":104,"column":21,"nodeType":"113","messageId":"114","endLine":104,"endColumn":31},{"ruleId":"111","severity":1,"message":"120","line":8,"column":12,"nodeType":"113","messageId":"114","endLine":8,"endColumn":18},{"ruleId":"111","severity":1,"message":"121","line":8,"column":20,"nodeType":"113","messageId":"114","endLine":8,"endColumn":29},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-native-reassign",["145"],"no-negated-in-lhs",["146"],"'postId' is assigned a value but never used.","'setPostId' is assigned a value but never used.","'Component' is defined but never used.","'dataAvv' is assigned a value but never used.","'setDataAvv' is assigned a value but never used.","'fetchAppuntamenti' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.","ArrayExpression",["147"],"'showSuccessAlert' is assigned a value but never used.","'showFailAlert' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/style-prop-object","Style prop value must be an object","JSXAttribute","'FormattedDate' is defined but never used.","'Moment' is defined but never used.","'dataSog' is assigned a value but never used.","'setDataSog' is assigned a value but never used.","'dataDot' is assigned a value but never used.","'setDataDot' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},"Update the dependencies array to be: [value]",{"range":"150","text":"151"},[2446,2448],"[value]"]